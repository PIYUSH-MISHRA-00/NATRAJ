/*
 * NETCAP - Traffic Analysis Framework
 * Copyright (c) 2017-2020 Philipp Mieden <dreadl0ck [at] protonmail [dot] ch>
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

package exploit

import (
	"path/filepath"

	"go.uber.org/zap"

	"github.com/dreadl0ck/netcap/decoder"
	decoderconfig "github.com/dreadl0ck/netcap/decoder/config"
	"github.com/dreadl0ck/netcap/decoder/db"
	logging "github.com/dreadl0ck/netcap/logger"
	"github.com/dreadl0ck/netcap/resolvers"
	"github.com/dreadl0ck/netcap/types"
)

var exploitLog = zap.NewNop()

// Decoder for protocol analysis and writing audit records to disk.
var Decoder = &decoder.AbstractDecoder{
	Type:        types.Type_NC_Exploit,
	Name:        "Exploit",
	Description: "An exploit proof of concept code snippet for a vulnerable application",
	PostInit: func(e *decoder.AbstractDecoder) error {
		// Load vulnerabilities DB index
		var (
			err       error
			indexName = filepath.Join(resolvers.DataBaseFolderPath, "exploit-db.bleve")
		)

		exploitLog, _, err = logging.InitZapLogger(
			decoderconfig.Instance.Out,
			"exploit",
			decoderconfig.Instance.Debug,
		)
		if err != nil {
			return err
		}

		db.ExploitsIndex, err = db.OpenBleve(indexName)
		if err != nil {
			// explicitly set to nil, otherwise it can't be determined whether the init succeeded later on
			db.ExploitsIndex = nil
			return err
		}

		return nil
	},
	DeInit: func(decoder *decoder.AbstractDecoder) error {
		db.CloseBleve(db.ExploitsIndex)

		return exploitLog.Sync()
	},
}
