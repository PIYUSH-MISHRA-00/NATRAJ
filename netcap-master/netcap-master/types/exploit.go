/*
 * NETCAP - Traffic Analysis Framework
 * Copyright (c) 2017-2020 Philipp Mieden <dreadl0ck [at] protonmail [dot] ch>
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

package types

import (
	"github.com/dreadl0ck/netcap/encoder"
	"strings"
	"time"

	"github.com/prometheus/client_golang/prometheus"
)

const (
	fieldDescription = "Description"
	fieldSoftware    = "Software"
)

var fieldsExploit = []string{
	fieldTimestamp,   // string
	fieldID,          // string
	fieldDescription, // string
	fieldFile,        // string
	fieldNotes,       // string
	fieldSoftware,    // *Software
}

// CSVHeader returns the CSV header for the audit record.
func (a *Exploit) CSVHeader() []string {
	return filter(fieldsExploit)
}

// CSVRecord returns the CSV record for the audit record.
func (a *Exploit) CSVRecord() []string {
	return filter([]string{
		formatTimestamp(a.Timestamp),
		a.ID,                // string
		a.Description,       // string
		a.File,              // string
		a.Notes,             // string
		a.Software.String(), // *Software
	})
}

// Time returns the timestamp associated with the audit record.
func (a *Exploit) Time() int64 {
	return a.Timestamp
}

// JSON returns the JSON representation of the audit record.
func (a *Exploit) JSON() (string, error) {
	// convert unix timestamp from nano to millisecond precision for elastic
	a.Timestamp /= int64(time.Millisecond)

	return jsonMarshaler.MarshalToString(a)
}

var exploitMetric = prometheus.NewCounterVec(
	prometheus.CounterOpts{
		Name: strings.ToLower(Type_NC_Exploit.String()),
		Help: Type_NC_Exploit.String() + " audit records",
	},
	fieldsExploit[1:],
)

// Inc increments the metrics for the audit record.
func (a *Exploit) Inc() {
	exploitMetric.WithLabelValues(a.CSVRecord()[1:]...).Inc()
}

// SetPacketContext sets the associated packet context for the audit record.
func (a *Exploit) SetPacketContext(*PacketContext) {}

// Src TODO: preserve source and destination mac adresses for Exploit and return them here.
// Src returns the source address of the audit record.
func (a *Exploit) Src() string {
	return ""
}

// Dst TODO: preserve source and destination mac adresses for Exploit and return them here.
// Dst returns the destination address of the audit record.
func (a *Exploit) Dst() string {
	return ""
}

var exploitEncoder = encoder.NewValueEncoder()

// Encode will encode categorical values and normalize according to configuration
func (a *Exploit) Encode() []string {
	return filter([]string{
		exploitEncoder.Int64(fieldTimestamp, a.Timestamp),
		exploitEncoder.String(fieldID, a.ID),                      // string
		exploitEncoder.String(fieldDescription, a.Description),    // string
		exploitEncoder.String(fieldFile, a.File),                  // string
		exploitEncoder.String(fieldNotes, a.Notes),                // string
		exploitEncoder.String(fieldSoftware, a.Software.String()), // *Software
	})
}

// Analyze will invoke the configured analyzer for the audit record and return a score.
func (a *Exploit) Analyze() {}

// NetcapType returns the type of the current audit record
func (a *Exploit) NetcapType() Type {
	return Type_NC_Exploit
}
