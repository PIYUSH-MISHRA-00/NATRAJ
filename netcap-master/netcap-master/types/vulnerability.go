/*
 * NETCAP - Traffic Analysis Framework
 * Copyright (c) 2017-2020 Philipp Mieden <dreadl0ck [at] protonmail [dot] ch>
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

package types

import (
	"github.com/dreadl0ck/netcap/encoder"
	"strings"
	"time"

	"github.com/prometheus/client_golang/prometheus"
)

const (
	fieldSeverity     = "Severity"
	fieldV2Score      = "V2Score"
	fieldAccessVector = "AccessVector"
	fieldVersions     = "Versions"
)

var fieldsVulnerability = []string{
	fieldTimestamp,    // string
	fieldID,           // string
	fieldDescription,  // string
	fieldSeverity,     // string
	fieldV2Score,      // string
	fieldAccessVector, // string
	fieldVersions,     // []string
	fieldNotes,        // string
	fieldSoftware,     // *Software
}

// CSVHeader returns the CSV header for the audit record.
func (a *Vulnerability) CSVHeader() []string {
	return filter(fieldsVulnerability)
}

// CSVRecord returns the CSV record for the audit record.
func (a *Vulnerability) CSVRecord() []string {
	return filter([]string{
		formatTimestamp(a.Timestamp),
		a.ID,
		a.Description,
		a.Severity,
		a.V2Score,
		a.AccessVector,
		join(a.Versions...),
		a.Notes,
		a.Software.String(),
	})
}

// Time returns the timestamp associated with the audit record.
func (a *Vulnerability) Time() int64 {
	return a.Timestamp
}

// JSON returns the JSON representation of the audit record.
func (a *Vulnerability) JSON() (string, error) {
	// convert unix timestamp from nano to millisecond precision for elastic
	a.Timestamp /= int64(time.Millisecond)

	return jsonMarshaler.MarshalToString(a)
}

var vulnerabilityMetric = prometheus.NewCounterVec(
	prometheus.CounterOpts{
		Name: strings.ToLower(Type_NC_Vulnerability.String()),
		Help: Type_NC_Vulnerability.String() + " audit records",
	},
	fieldsVulnerability[1:],
)

// Inc increments the metrics for the audit record.
func (a *Vulnerability) Inc() {
	vulnerabilityMetric.WithLabelValues(a.CSVRecord()[1:]...).Inc()
}

// SetPacketContext sets the associated packet context for the audit record.
func (a *Vulnerability) SetPacketContext(*PacketContext) {}

// Src TODO: preserve source and destination mac addresses for Vulnerability and return them here.
// Src returns the source address of the audit record.
func (a *Vulnerability) Src() string {
	return ""
}

// Dst TODO: preserve source and destination mac adresses for Vulnerability and return them here.
// Dst returns the destination address of the audit record.
func (a *Vulnerability) Dst() string {
	return ""
}

var vulnerabilityEncoder = encoder.NewValueEncoder()

// Encode will encode categorical values and normalize according to configuration
func (a *Vulnerability) Encode() []string {
	return filter([]string{
		vulnerabilityEncoder.Int64(fieldTimestamp, a.Timestamp),
		vulnerabilityEncoder.String(fieldID, a.ID),
		vulnerabilityEncoder.String(fieldDescription, a.Description),
		vulnerabilityEncoder.String(fieldSeverity, a.Severity),
		vulnerabilityEncoder.String(fieldV2Score, a.V2Score),
		vulnerabilityEncoder.String(fieldAccessVector, a.AccessVector),
		vulnerabilityEncoder.String(fieldVersions, join(a.Versions...)),
		vulnerabilityEncoder.String(fieldNotes, a.Notes),
		vulnerabilityEncoder.String(fieldSoftware, a.Software.String()),
	})
}

// Analyze will invoke the configured analyzer for the audit record and return a score.
func (a *Vulnerability) Analyze() {
}

// NetcapType returns the type of the current audit record
func (a *Vulnerability) NetcapType() Type {
	return Type_NC_Vulnerability
}
