/*
 * NETCAP - Traffic Analysis Framework
 * Copyright (c) 2017-2020 Philipp Mieden <dreadl0ck [at] protonmail [dot] ch>
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

package transform

import (
	netmaltego "github.com/dreadl0ck/netcap/maltego"
	"strings"

	"github.com/dreadl0ck/maltego"
	"github.com/dreadl0ck/netcap/types"
	"github.com/dreadl0ck/netcap/utils"
)

func toSoftwareExploits() {
	netmaltego.ExploitTransform(
		nil,
		func(lt maltego.LocalTransform, trx *maltego.Transform, exp *types.Exploit, min, max uint64, path string, mac string, ipaddr string) {
			val := exp.ID
			product := exp.Software.Product + " / " + exp.Software.Version
			if len(product) > 0 {
				// for splitting descriptions from exploitdb
				//parts := strings.Split(vuln.Description, "-")
				//if len(parts) > 1 {
				//	val = parts[0] + "\n" + strings.Join(parts[1:], "-")
				//}
				val += "\n" + product
			}
			if len(exp.Description) > 0 {
				val += "\n" + exp.Description
			}

			ent := addEntityWithPath(trx, "netcap.Exploit", val, path)
			ent.AddProperty("timestamp", "Timestamp", maltego.Strict, utils.UnixTimeToUTC(exp.Timestamp))
			ent.AddProperty("id", "ID", maltego.Strict, exp.ID)
			ent.AddProperty("notes", "Notes", maltego.Strict, exp.Notes)
			ent.AddProperty("flows", "Flows", maltego.Strict, strings.Join(exp.Software.Flows, " | "))
			ent.AddProperty("software", "Software", maltego.Strict, exp.Software.Product+" "+exp.Software.Version)
			ent.AddProperty("file", "File", maltego.Strict, exp.File)
			ent.AddProperty("platform", "Platform", maltego.Strict, exp.Platform)
			ent.AddProperty("platform", "Platform", maltego.Strict, exp.Platform)
			ent.AddProperty("type", "Type", maltego.Strict, exp.Typ)

			ent.AddDisplayInformation(strings.Join(exp.Software.Flows, "<br>"), "Flows")
		},
	)
}
